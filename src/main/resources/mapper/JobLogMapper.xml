<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gogoyang.rpgapi.meta.log.dao.JobLogDao">

    <!--配置job_log表和JobLog对象的字段映射 -->
    <resultMap id="jobLogMap" type="com.gogoyang.rpgapi.meta.log.entity.JobLog">
        <result property="jobLogId" column="job_log_id"/>
        <result property="jobId" column="job_id"/>
        <result property="createdUserId" column="created_user_id"/>
        <result property="createdUserName" column="created_user_name"/>
        <result property="createdUserName" column="real_name"/>
        <result property="createdTime" column="created_time"/>
        <result property="readTime" column="read_time"/>
        <result property="partyAId" column="partya_id"/>
        <result property="partyAName" column="partya_name"/>
        <result property="partyBId" column="partyb_id"/>
        <result property="partyBName" column="partyb_name"/>
    </resultMap>

    <select id="createJobLog" parameterType="com.gogoyang.rpgapi.meta.log.entity.JobLog">
        insert into job_log
        (job_log_id, job_id, created_user_id, created_time,
        content, partya_id, partyb_id)
        values
        (#{jobLogId}, #{jobId}, #{createdUserId}, #{createdTime},
        #{content}, #{partyAId}, #{partyBId})
    </select>

    <!--读取任务日志详情-->
    <select id="getJobLog" parameterType="java.lang.String" resultMap="jobLogMap">
        select job_log.ids,
           job_log_id,
           job_log.job_id,
           created_user_id,
           created_user.real_name as created_user_name,
           job_log.created_time,
           content,
           read_time,
           job_log.partya_id,
           partya.real_name as partya_name,
           job_log.partyb_id,
           partyb.real_name as partyb_name
        from job_log
        left join job on job_log.job_id=job.job_id
        left join user_info created_user on created_user_id=user_id
        left join user_info partya on job_log.partya_id=partya.user_id
        left join user_info partyb on job_log.partyb_id=partyb.user_id
        where job_log_id=#{jobLogId}
    </select>

    <!--批量查询任务日志-->
    <select id="listJobLog" parameterType="map" resultMap="jobLogMap">
        select job_log.ids,
        job_log_id,
        job_log.job_id,
        created_user_id,
        created_user.real_name as created_user_name,
        job_log.created_time,
        content,
        read_time,
        job_log.partya_id,
        partya.real_name as partya_name,
        job_log.partyb_id,
        partyb.real_name as partyb_name
        from job_log
        left join job on job_log.job_id=job.job_id
        left join user_info created_user on created_user_id=user_id
        left join user_info partya on job_log.partya_id=partya.user_id
        left join user_info partyb on job_log.partyb_id=partyb.user_id
        where 1=1
        <choose>
            <when test="jobId!=null">
                and job_log.job_id=#{jobId}
            </when>
        </choose>
        <choose>
            <when test="createdUserId!=null">
                and created_user_id=#{createdUserId}
            </when>
        </choose>
        <choose>
            <when test="unread!=null">
                and read_time is null
                <![CDATA[
                and created_user_id <>#{userId}
                ]]>
            </when>
        </choose>
        <choose>
            <when test="partyAId!=null">
                and job_log.partya_id=#{partyAId}
            </when>
        </choose>
        <choose>
            <when test="partyBId!=null">
                and job_log.partyb_id=#{partyBId}
            </when>
        </choose>
        order by ids desc
        <choose>
            <when test="offset!=null">
                limit #{offset}, #{size}
            </when>
        </choose>
    </select>

    <!--统计所有未阅读的任务日志-->
    <select id="totalUnreadLog" parameterType="map"
            resultType="java.lang.Integer">
        select count(*) as total_unread_log
        from job_log
        left join user_info on created_user_id = user_id
        where 1 = 1
        <choose>
            <when test="jobId!=null">
                and job_id = #{jobId}
            </when>
        </choose>
        <choose>
            <when test="partyAId!=null">
                and partya_id=#{partyAId}
            </when>
        </choose>
        <choose>
            <when test="partyBId!=null">
                and partyb_id=#{partyBId}
            </when>
        </choose>
        and read_time is null
        <![CDATA[
        and created_user_id<>#{userId}
        ]]>
    </select>

    <!--设置日志阅读时间-->
    <update id="setJobLogReadTime" parameterType="map">
        update job_log set
        read_time=#{readTime}
        where 1=1
        and read_time is null
        <![CDATA[
        and created_user_id<>#{userId}
        ]]>
        and job_id=#{jobId}
    </update>

    <!--统计任务日志总数-->
    <select id="totalJobLog" parameterType="map" resultType="java.lang.Integer">
        select count(*) as total
        from job_log
        where 1 = 1
        <choose>
            <when test="jobId!=null">
                and job_id = #{jobId}
            </when>
        </choose>
    </select>

    <!--删除日志-->
    <delete id="deleteJobLog" parameterType="java.lang.String">
        delete from job_log
        where job_log_id=#{jobLogId}
    </delete>

    <!--修改日志内容-->
    <update id="updateJobLog" parameterType="com.gogoyang.rpgapi.meta.log.entity.JobLog">
        update job_log
        <set>
            <if test="content!=null">
                content=#{content}
            </if>
        </set>
        where job_log_id=#{jobLogId}
    </update>

</mapper>